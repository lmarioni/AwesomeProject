{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false}},{"name":"../index.js","data":{"isAsync":false}},{"name":"../fs.js","data":{"isAsync":false}},{"name":"../utils/uuid","data":{"isAsync":false}},{"name":"../utils/log.js","data":{"isAsync":false}},{"name":"./EventTarget","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n\n  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/getPrototypeOf\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/createClass\"));\n\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"@babel/runtime/helpers/inherits\"));\n\n  var _index = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"../index.js\"));\n\n  var _fs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"../fs.js\"));\n\n  var _uuid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9], \"../utils/uuid\"));\n\n  var _log = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10], \"../utils/log.js\"));\n\n  var _EventTarget2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11], \"./EventTarget\"));\n\n  var log = new _log.default('Blob');\n  var blobCacheDir = _fs.default.dirs.DocumentDir + '/RNFetchBlob-blobs/';\n  log.disable();\n\n  var Blob = function (_EventTarget) {\n    (0, _inherits2.default)(Blob, _EventTarget);\n    (0, _createClass2.default)(Blob, [{\n      key: \"blobPath\",\n      get: function get() {\n        return this._ref;\n      }\n    }], [{\n      key: \"clearCache\",\n      value: function clearCache() {\n        return _fs.default.unlink(blobCacheDir).then(function () {\n          return _fs.default.mkdir(blobCacheDir);\n        });\n      }\n    }, {\n      key: \"build\",\n      value: function build(data, cType) {\n        return new Promise(function (resolve, reject) {\n          new Blob(data, cType).onCreated(resolve);\n        });\n      }\n    }, {\n      key: \"setLog\",\n      value: function setLog(level) {\n        if (level === -1) log.disable();else log.level(level);\n      }\n    }]);\n\n    function Blob(data, cType, defer) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, Blob);\n      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Blob).call(this));\n      _this.isRNFetchBlobPolyfill = true;\n      _this.multipartBoundary = null;\n      _this._ref = null;\n      _this._blobCreated = false;\n      _this._onCreated = [];\n      _this._closed = false;\n      cType = cType || {};\n      _this.cacheName = getBlobName();\n      _this.isRNFetchBlobPolyfill = true;\n      _this.isDerived = defer;\n      _this.type = cType.type || 'text/plain';\n      log.verbose('Blob constructor called', 'mime', _this.type, 'type', typeof data, 'length', data ? data.length : 0);\n      _this._ref = blobCacheDir + _this.cacheName;\n      var p = null;\n      if (!data) data = '';\n\n      if (data.isRNFetchBlobPolyfill) {\n        log.verbose('create Blob cache file from Blob object');\n        var size = 0;\n        _this._ref = String(data.getRNFetchBlobRef());\n        var orgPath = _this._ref;\n        p = _fs.default.exists(orgPath).then(function (exist) {\n          if (exist) return _fs.default.writeFile(orgPath, data, 'uri').then(function (size) {\n            return Promise.resolve(size);\n          }).catch(function (err) {\n            throw \"RNFetchBlob Blob file creation error, \" + err;\n          });else throw \"could not create Blob from path \" + orgPath + \", file not exists\";\n        });\n      } else if (data instanceof FormData) {\n          log.verbose('create Blob cache file from FormData', data);\n          var boundary = \"RNFetchBlob-\" + _this.cacheName + \"-\" + Date.now();\n          _this.multipartBoundary = boundary;\n          var parts = data.getParts();\n          var formArray = [];\n\n          if (!parts) {\n            p = _fs.default.writeFile(_this._ref, '', 'utf8');\n          } else {\n            for (var i in parts) {\n              formArray.push('\\r\\n--' + boundary + '\\r\\n');\n              var part = parts[i];\n\n              for (var j in part.headers) {\n                formArray.push(j + ': ' + part.headers[j] + '\\r\\n');\n              }\n\n              formArray.push('\\r\\n');\n              if (part.isRNFetchBlobPolyfill) formArray.push(part);else formArray.push(part.string);\n            }\n\n            log.verbose('FormData array', formArray);\n            formArray.push('\\r\\n--' + boundary + '--\\r\\n');\n            p = createMixedBlobData(_this._ref, formArray);\n          }\n        } else if (typeof data === 'string' && data.startsWith('RNFetchBlob-file://')) {\n            log.verbose('create Blob cache file from file path', data);\n            _this._isReference = true;\n            _this._ref = String(data).replace('RNFetchBlob-file://', '');\n            var _orgPath = _this._ref;\n            if (defer) return (0, _possibleConstructorReturn2.default)(_this);else {\n              p = _fs.default.stat(_orgPath).then(function (stat) {\n                return Promise.resolve(stat.size);\n              });\n            }\n          } else if (typeof data === 'string') {\n              var encoding = 'utf8';\n              var mime = String(_this.type);\n              if (/(application\\/octet|\\;base64)/i.test(mime)) encoding = 'base64';else data = data.toString();\n              _this.type = String(_this.type).replace(/;base64/ig, '');\n              log.verbose('create Blob cache file from string', 'encode', encoding);\n              p = _fs.default.writeFile(_this._ref, data, encoding).then(function (size) {\n                return Promise.resolve(size);\n              });\n            } else if (Array.isArray(data)) {\n                log.verbose('create Blob cache file from mixed array', data);\n                p = createMixedBlobData(_this._ref, data);\n              } else {\n                data = data.toString();\n                p = _fs.default.writeFile(_this._ref, data, 'utf8').then(function (size) {\n                  return Promise.resolve(size);\n                });\n              }\n\n      p && p.then(function (size) {\n        _this.size = size;\n\n        _this._invokeOnCreateEvent();\n      }).catch(function (err) {\n        log.error('RNFetchBlob could not create Blob : ' + _this._ref, err);\n      });\n      return _this;\n    }\n\n    (0, _createClass2.default)(Blob, [{\n      key: \"onCreated\",\n      value: function onCreated(fn) {\n        log.verbose('#register blob onCreated', this._blobCreated);\n        if (!this._blobCreated) this._onCreated.push(fn);else {\n          fn(this);\n        }\n        return this;\n      }\n    }, {\n      key: \"markAsDerived\",\n      value: function markAsDerived() {\n        this._isDerived = true;\n      }\n    }, {\n      key: \"getRNFetchBlobRef\",\n      value: function getRNFetchBlobRef() {\n        return this._ref;\n      }\n    }, {\n      key: \"slice\",\n      value: function slice(start, end) {\n        var _this2 = this;\n\n        var contentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n        if (this._closed) throw 'Blob has been released.';\n        log.verbose('slice called', start, end, contentType);\n        var resPath = blobCacheDir + getBlobName();\n        var pass = false;\n        log.debug('fs.slice new blob will at', resPath);\n        var result = new Blob(_index.default.wrap(resPath), {\n          type: contentType\n        }, true);\n\n        _fs.default.exists(blobCacheDir).then(function (exist) {\n          if (exist) return Promise.resolve();\n          return _fs.default.mkdir(blobCacheDir);\n        }).then(function () {\n          return _fs.default.slice(_this2._ref, resPath, start, end);\n        }).then(function (dest) {\n          log.debug('fs.slice done', dest);\n\n          result._invokeOnCreateEvent();\n\n          pass = true;\n        }).catch(function (err) {\n          console.warn('Blob.slice failed:', err);\n          pass = true;\n        });\n\n        log.debug('slice returning new Blob');\n        return result;\n      }\n    }, {\n      key: \"readBlob\",\n      value: function readBlob(encoding) {\n        if (this._closed) throw 'Blob has been released.';\n        return _fs.default.readFile(this._ref, encoding || 'utf8');\n      }\n    }, {\n      key: \"close\",\n      value: function close() {\n        if (this._closed) return Promise.reject('Blob has been released.');\n        this._closed = true;\n        return _fs.default.unlink(this._ref).catch(function (err) {\n          console.warn(err);\n        });\n      }\n    }, {\n      key: \"safeClose\",\n      value: function safeClose() {\n        if (this._closed) return Promise.reject('Blob has been released.');\n        this._closed = true;\n\n        if (!this._isReference) {\n          return _fs.default.unlink(this._ref).catch(function (err) {\n            console.warn(err);\n          });\n        } else {\n          return Promise.resolve();\n        }\n      }\n    }, {\n      key: \"_invokeOnCreateEvent\",\n      value: function _invokeOnCreateEvent() {\n        log.verbose('invoke create event', this._onCreated);\n        this._blobCreated = true;\n        var fns = this._onCreated;\n\n        for (var i in fns) {\n          if (typeof fns[i] === 'function') {\n            fns[i](this);\n          }\n        }\n\n        delete this._onCreated;\n      }\n    }, {\n      key: \"isDerived\",\n      get: function get() {\n        return this._isDerived || false;\n      }\n    }]);\n    return Blob;\n  }(_EventTarget2.default);\n\n  exports.default = Blob;\n\n  function getBlobName() {\n    return 'blob-' + (0, _uuid.default)();\n  }\n\n  function createMixedBlobData(ref, dataArray) {\n    var p = _fs.default.writeFile(ref, '');\n\n    var args = [];\n    var size = 0;\n\n    for (var i in dataArray) {\n      var part = dataArray[i];\n      if (!part) continue;\n\n      if (part.isRNFetchBlobPolyfill) {\n        args.push([ref, part._ref, 'uri']);\n      } else if (typeof part === 'string') args.push([ref, part, 'utf8']);else if (Array.isArray(part)) args.push([ref, part, 'ascii']);\n    }\n\n    var _loop = function _loop(_i) {\n      p = p.then(function (written) {\n        var arg = this;\n        if (written) size += written;\n        log.verbose('mixed blob write', args[_i], written);\n        return _fs.default.appendFile.apply(_fs.default, (0, _toConsumableArray2.default)(arg));\n      }.bind(args[_i]));\n    };\n\n    for (var _i in args) {\n      _loop(_i);\n    }\n\n    return p.then(function () {\n      return Promise.resolve(size);\n    });\n  }\n});","map":[[21,0,5,0],[23,0,6,0],[25,0,7,0],[27,0,8,0],[29,0,9,0],[31,0,11,0],[31,6,11,6,"log"],[31,9,11,9],[31,12,11,12],[31,16,11,16,"Log"],[31,28,11,12],[31,29,11,20],[31,35,11,12],[31,36,11,0],[32,0,12,0],[32,6,12,6,"blobCacheDir"],[32,18,12,18],[32,21,12,21,"fs"],[32,33,12,24,"dirs"],[32,37,12,21],[32,38,12,29,"DocumentDir"],[32,49,12,21],[32,52,12,43],[32,73,12,0],[33,0,14,0,"log"],[33,2,14,0,"log"],[33,5,14,3],[33,6,14,4,"disable"],[33,13,14,0],[35,6,21,21,"Blob"],[35,10],[39,26,49,17],[40,0,50,4],[40,15,50,11],[40,20,50,16,"_ref"],[40,24,50,4],[41,0,51,3],[44,35,39,22],[45,0,40,4],[45,15,40,11,"fs"],[45,27,40,14,"unlink"],[45,33,40,11],[45,34,40,21,"blobCacheDir"],[45,46,40,11],[45,48,40,35,"then"],[45,52,40,11],[45,53,40,40],[46,0,40,40],[46,17,40,46,"fs"],[46,29,40,49,"mkdir"],[46,34,40,46],[46,35,40,55,"blobCacheDir"],[46,47,40,46],[46,48,40,40],[47,0,40,40],[47,9,40,11],[47,10,40,4],[48,0,41,3],[51,28,43,15,"data"],[51,32],[51,34,43,25,"cType"],[51,39],[51,41,43,50],[52,0,44,4],[52,15,44,11],[52,19,44,15,"Promise"],[52,26,44,11],[52,27,44,23],[52,37,44,24,"resolve"],[52,44,44,23],[52,46,44,33,"reject"],[52,52,44,23],[52,54,44,44],[53,0,45,6],[53,14,45,10,"Blob"],[53,18,45,6],[53,19,45,15,"data"],[53,23,45,6],[53,25,45,21,"cType"],[53,30,45,6],[53,32,45,28,"onCreated"],[53,41,45,6],[53,42,45,38,"resolve"],[53,49,45,6],[54,0,46,5],[54,9,44,11],[54,10,44,4],[55,0,47,3],[58,29,53,16,"level"],[58,34],[58,36,53,30],[59,0,54,4],[59,12,54,7,"level"],[59,17,54,12],[59,22,54,17],[59,23,54,18],[59,24,54,4],[59,26,55,6,"log"],[59,29,55,9],[59,30,55,10,"disable"],[59,37,55,6],[59,40,54,4],[59,45,57,6,"log"],[59,48,57,9],[59,49,57,10,"level"],[59,54,57,6],[59,55,57,16,"level"],[59,60,57,6],[60,0,58,3],[63,0,71,2],[63,18,71,14,"data"],[63,22,71,2],[63,24,71,24,"cType"],[63,29,71,2],[63,31,71,35,"defer"],[63,36,71,2],[63,38,71,50],[64,0,71,50],[66,0,71,50],[67,0,72,4],[68,0,71,50],[68,12,26,2,"isRNFetchBlobPolyfill"],[68,33,71,50],[68,36,26,34],[68,40,71,50],[69,0,71,50],[69,12,27,2,"multipartBoundary"],[69,29,71,50],[69,32,27,29],[69,36,71,50],[70,0,71,50],[70,12,29,2,"_ref"],[70,16,71,50],[70,19,29,16],[70,23,71,50],[71,0,71,50],[71,12,30,2,"_blobCreated"],[71,24,71,50],[71,27,30,25],[71,32,71,50],[72,0,71,50],[72,12,31,2,"_onCreated"],[72,22,71,50],[72,25,31,26],[72,27,71,50],[73,0,71,50],[73,12,32,2,"_closed"],[73,19,71,50],[73,22,32,20],[73,27,71,50],[74,0,73,4,"cType"],[74,6,73,4,"cType"],[74,11,73,9],[74,14,73,12,"cType"],[74,19,73,17],[74,23,73,21],[74,25,73,4],[75,0,74,4],[75,12,74,9,"cacheName"],[75,21,74,4],[75,24,74,21,"getBlobName"],[75,35,74,32],[75,37,74,4],[76,0,75,4],[76,12,75,9,"isRNFetchBlobPolyfill"],[76,33,75,4],[76,36,75,33],[76,40,75,4],[77,0,76,4],[77,12,76,9,"isDerived"],[77,21,76,4],[77,24,76,21,"defer"],[77,29,76,4],[78,0,77,4],[78,12,77,9,"type"],[78,16,77,4],[78,19,77,16,"cType"],[78,24,77,21],[78,25,77,22,"type"],[78,29,77,16],[78,33,77,30],[78,45,77,4],[79,0,78,4,"log"],[79,6,78,4,"log"],[79,9,78,7],[79,10,78,8,"verbose"],[79,17,78,4],[79,18,78,16],[79,43,78,4],[79,45,78,43],[79,51,78,4],[79,53,78,51],[79,59,78,56,"type"],[79,63,78,4],[79,65,78,62],[79,71,78,4],[79,73,78,70],[79,80,78,77,"data"],[79,84,78,4],[79,86,78,83],[79,94,78,4],[79,96,78,93,"data"],[79,100,78,97],[79,103,78,100,"data"],[79,107,78,104],[79,108,78,105,"length"],[79,114,78,97],[79,117,78,112],[79,118,78,4],[80,0,79,4],[80,12,79,9,"_ref"],[80,16,79,4],[80,19,79,16,"blobCacheDir"],[80,31,79,28],[80,34,79,31],[80,40,79,36,"cacheName"],[80,49,79,4],[81,0,80,4],[81,10,80,8,"p"],[81,11,80,9],[81,14,80,12],[81,18,80,4],[82,0,81,4],[82,10,81,7],[82,11,81,8,"data"],[82,15,81,4],[82,17,82,6,"data"],[82,21,82,10],[82,24,82,13],[82,26,82,6],[84,0,83,4],[84,10,83,7,"data"],[84,14,83,11],[84,15,83,12,"isRNFetchBlobPolyfill"],[84,36,83,4],[84,38,83,35],[85,0,84,6,"log"],[85,8,84,6,"log"],[85,11,84,9],[85,12,84,10,"verbose"],[85,19,84,6],[85,20,84,18],[85,61,84,6],[86,0,85,6],[86,12,85,10,"size"],[86,16,85,14],[86,19,85,17],[86,20,85,6],[87,0,86,6],[87,14,86,11,"_ref"],[87,18,86,6],[87,21,86,18,"String"],[87,27,86,24],[87,28,86,25,"data"],[87,32,86,29],[87,33,86,30,"getRNFetchBlobRef"],[87,50,86,25],[87,52,86,24],[87,53,86,6],[88,0,87,6],[88,12,87,10,"orgPath"],[88,19,87,17],[88,22,87,20],[88,28,87,25,"_ref"],[88,32,87,6],[89,0,89,6,"p"],[89,8,89,6,"p"],[89,9,89,7],[89,12,89,10,"fs"],[89,24,89,13,"exists"],[89,30,89,10],[89,31,89,20,"orgPath"],[89,38,89,10],[89,40,90,13,"then"],[89,44,89,10],[89,45,90,18],[89,55,90,19,"exist"],[89,60,90,18],[89,62,90,30],[90,0,91,14],[90,14,91,17,"exist"],[90,19,91,14],[90,21,92,16],[90,28,92,23,"fs"],[90,40,92,26,"writeFile"],[90,49,92,23],[90,50,92,36,"orgPath"],[90,57,92,23],[90,59,92,45,"data"],[90,63,92,23],[90,65,92,51],[90,70,92,23],[90,72,93,26,"then"],[90,76,92,23],[90,77,93,31],[90,87,93,32,"size"],[90,91,93,31],[91,0,93,31],[91,19,93,41,"Promise"],[91,26,93,48],[91,27,93,49,"resolve"],[91,34,93,41],[91,35,93,57,"size"],[91,39,93,41],[91,40,93,31],[92,0,93,31],[92,11,92,23],[92,13,94,26,"catch"],[92,18,92,23],[92,19,94,32],[92,29,94,33,"err"],[92,32,94,32],[92,34,94,41],[93,0,95,27],[93,61,95,74,"err"],[93,64,95,27],[94,0,96,26],[94,11,92,23],[94,12,92,16],[94,13,91,14],[94,18,98,16],[94,61,98,57,"orgPath"],[94,68,98,16],[95,0,99,13],[95,9,89,10],[95,10,89,6],[96,0,100,5],[96,7,83,4],[96,13,102,9],[96,17,102,12,"data"],[96,21,102,16],[96,33,102,28,"FormData"],[96,41,102,9],[96,43,102,38],[97,0,103,6,"log"],[97,10,103,6,"log"],[97,13,103,9],[97,14,103,10,"verbose"],[97,21,103,6],[97,22,103,18],[97,60,103,6],[97,62,103,58,"data"],[97,66,103,6],[98,0,104,6],[98,14,104,10,"boundary"],[98,22,104,18],[98,42,104,36],[98,48,104,41,"cacheName"],[98,57,104,18],[98,66,104,54,"Date"],[98,70,104,58],[98,71,104,59,"now"],[98,74,104,54],[98,76,104,6],[99,0,105,6],[99,16,105,11,"multipartBoundary"],[99,33,105,6],[99,36,105,31,"boundary"],[99,44,105,6],[100,0,106,6],[100,14,106,10,"parts"],[100,19,106,15],[100,22,106,18,"data"],[100,26,106,22],[100,27,106,23,"getParts"],[100,35,106,18],[100,37,106,6],[101,0,107,6],[101,14,107,10,"formArray"],[101,23,107,19],[101,26,107,22],[101,28,107,6],[103,0,108,6],[103,14,108,9],[103,15,108,10,"parts"],[103,20,108,6],[103,22,108,17],[104,0,109,8,"p"],[104,12,109,8,"p"],[104,13,109,9],[104,16,109,12,"fs"],[104,28,109,15,"writeFile"],[104,37,109,12],[104,38,109,25],[104,44,109,30,"_ref"],[104,48,109,12],[104,50,109,36],[104,52,109,12],[104,54,109,40],[104,60,109,12],[104,61,109,8],[105,0,110,7],[105,11,108,6],[105,17,111,11],[106,0,112,8],[106,17,112,12],[106,21,112,16,"i"],[106,22,112,8],[106,26,112,21,"parts"],[106,31,112,8],[106,33,112,28],[107,0,113,10,"formArray"],[107,14,113,10,"formArray"],[107,23,113,19],[107,24,113,20,"push"],[107,28,113,10],[107,29,113,25],[107,40,113,34,"boundary"],[107,48,113,25],[107,51,113,43],[107,57,113,10],[108,0,114,10],[108,18,114,14,"part"],[108,22,114,18],[108,25,114,21,"parts"],[108,30,114,26],[108,31,114,27,"i"],[108,32,114,26],[108,33,114,10],[110,0,115,10],[110,19,115,14],[110,23,115,18,"j"],[110,24,115,10],[110,28,115,23,"part"],[110,32,115,27],[110,33,115,28,"headers"],[110,40,115,10],[110,42,115,37],[111,0,116,12,"formArray"],[111,16,116,12,"formArray"],[111,25,116,21],[111,26,116,22,"push"],[111,30,116,12],[111,31,116,27,"j"],[111,32,116,28],[111,35,116,31],[111,39,116,27],[111,42,116,37,"part"],[111,46,116,41],[111,47,116,42,"headers"],[111,54,116,37],[111,55,116,50,"j"],[111,56,116,37],[111,57,116,27],[111,60,116,55],[111,66,116,12],[112,0,117,11],[114,0,118,10,"formArray"],[114,14,118,10,"formArray"],[114,23,118,19],[114,24,118,20,"push"],[114,28,118,10],[114,29,118,25],[114,35,118,10],[115,0,119,10],[115,18,119,13,"part"],[115,22,119,17],[115,23,119,18,"isRNFetchBlobPolyfill"],[115,44,119,10],[115,46,120,12,"formArray"],[115,55,120,21],[115,56,120,22,"push"],[115,60,120,12],[115,61,120,27,"part"],[115,65,120,12],[115,67,119,10],[115,72,122,12,"formArray"],[115,81,122,21],[115,82,122,22,"push"],[115,86,122,12],[115,87,122,27,"part"],[115,91,122,31],[115,92,122,32,"string"],[115,98,122,12],[116,0,123,9],[118,0,124,8,"log"],[118,12,124,8,"log"],[118,15,124,11],[118,16,124,12,"verbose"],[118,23,124,8],[118,24,124,20],[118,40,124,8],[118,42,124,38,"formArray"],[118,51,124,8],[119,0,125,8,"formArray"],[119,12,125,8,"formArray"],[119,21,125,17],[119,22,125,18,"push"],[119,26,125,8],[119,27,125,23],[119,38,125,32,"boundary"],[119,46,125,23],[119,49,125,41],[119,57,125,8],[120,0,126,8,"p"],[120,12,126,8,"p"],[120,13,126,9],[120,16,126,12,"createMixedBlobData"],[120,35,126,31],[120,36,126,32],[120,42,126,37,"_ref"],[120,46,126,31],[120,48,126,43,"formArray"],[120,57,126,31],[120,58,126,8],[121,0,127,7],[122,0,128,5],[122,9,102,9],[122,15,131,9],[122,19,131,12],[122,26,131,19,"data"],[122,30,131,12],[122,35,131,28],[122,43,131,12],[122,47,131,40,"data"],[122,51,131,44],[122,52,131,45,"startsWith"],[122,62,131,40],[122,63,131,56],[122,84,131,40],[122,85,131,9],[122,87,131,80],[123,0,132,6,"log"],[123,12,132,6,"log"],[123,15,132,9],[123,16,132,10,"verbose"],[123,23,132,6],[123,24,132,18],[123,63,132,6],[123,65,132,59,"data"],[123,69,132,6],[124,0,134,6],[124,18,134,11,"_isReference"],[124,30,134,6],[124,33,134,26],[124,37,134,6],[125,0,135,6],[125,18,135,11,"_ref"],[125,22,135,6],[125,25,135,18,"String"],[125,31,135,24],[125,32,135,25,"data"],[125,36,135,24],[125,37,135,18],[125,38,135,31,"replace"],[125,45,135,18],[125,46,135,39],[125,67,135,18],[125,69,135,62],[125,71,135,18],[125,72,135,6],[126,0,136,6],[126,16,136,10,"orgPath"],[126,24,136,17],[126,27,136,20],[126,33,136,25,"_ref"],[126,37,136,6],[127,0,137,6],[127,16,137,9,"defer"],[127,21,137,6],[127,23,138,8],[127,78,137,6],[127,83,139,11],[128,0,140,8,"p"],[128,14,140,8,"p"],[128,15,140,9],[128,18,140,12,"fs"],[128,30,140,15,"stat"],[128,34,140,12],[128,35,140,20,"orgPath"],[128,43,140,12],[128,45,141,15,"then"],[128,49,140,12],[128,50,141,20],[128,60,141,21,"stat"],[128,64,141,20],[128,66,141,31],[129,0,142,16],[129,23,142,23,"Promise"],[129,30,142,30],[129,31,142,31,"resolve"],[129,38,142,23],[129,39,142,39,"stat"],[129,43,142,43],[129,44,142,44,"size"],[129,48,142,23],[129,49,142,16],[130,0,143,15],[130,15,140,12],[130,16,140,8],[131,0,144,7],[132,0,145,5],[132,11,131,9],[132,17,147,9],[132,21,147,12],[132,28,147,19,"data"],[132,32,147,12],[132,37,147,28],[132,45,147,9],[132,47,147,38],[133,0,148,6],[133,18,148,10,"encoding"],[133,26,148,18],[133,29,148,21],[133,35,148,6],[134,0,149,6],[134,18,149,10,"mime"],[134,22,149,14],[134,25,149,17,"String"],[134,31,149,23],[134,32,149,24],[134,38,149,29,"type"],[134,42,149,23],[134,43,149,6],[135,0,152,6],[135,18,152,9],[135,51,152,42,"test"],[135,55,152,9],[135,56,152,47,"mime"],[135,60,152,9],[135,61,152,6],[135,63,153,8,"encoding"],[135,71,153,16],[135,74,153,19],[135,82,153,8],[135,83,152,6],[135,88,155,8,"data"],[135,92,155,12],[135,95,155,15,"data"],[135,99,155,19],[135,100,155,20,"toString"],[135,108,155,15],[135,110,155,8],[136,0,157,6],[136,20,157,11,"type"],[136,24,157,6],[136,27,157,18,"String"],[136,33,157,24],[136,34,157,25],[136,40,157,30,"type"],[136,44,157,24],[136,45,157,18],[136,46,157,36,"replace"],[136,53,157,18],[136,54,157,44],[136,65,157,18],[136,67,157,57],[136,69,157,18],[136,70,157,6],[137,0,158,6,"log"],[137,14,158,6,"log"],[137,17,158,9],[137,18,158,10,"verbose"],[137,25,158,6],[137,26,158,18],[137,62,158,6],[137,64,158,56],[137,72,158,6],[137,74,158,66,"encoding"],[137,82,158,6],[138,0,159,6,"p"],[138,14,159,6,"p"],[138,15,159,7],[138,18,159,10,"fs"],[138,30,159,13,"writeFile"],[138,39,159,10],[138,40,159,23],[138,46,159,28,"_ref"],[138,50,159,10],[138,52,159,34,"data"],[138,56,159,10],[138,58,159,40,"encoding"],[138,66,159,10],[138,68,160,13,"then"],[138,72,159,10],[138,73,160,18],[138,83,160,19,"size"],[138,87,160,18],[138,89,160,28],[139,0,161,14],[139,23,161,21,"Promise"],[139,30,161,28],[139,31,161,29,"resolve"],[139,38,161,21],[139,39,161,37,"size"],[139,43,161,21],[139,44,161,14],[140,0,162,13],[140,15,159,10],[140,16,159,6],[141,0,164,5],[141,13,147,9],[141,19,170,9],[141,23,170,12,"Array"],[141,28,170,17],[141,29,170,18,"isArray"],[141,36,170,12],[141,37,170,26,"data"],[141,41,170,12],[141,42,170,9],[141,44,170,33],[142,0,171,6,"log"],[142,16,171,6,"log"],[142,19,171,9],[142,20,171,10,"verbose"],[142,27,171,6],[142,28,171,18],[142,69,171,6],[142,71,171,61,"data"],[142,75,171,6],[143,0,172,6,"p"],[143,16,172,6,"p"],[143,17,172,7],[143,20,172,10,"createMixedBlobData"],[143,39,172,29],[143,40,172,30],[143,46,172,35,"_ref"],[143,50,172,29],[143,52,172,41,"data"],[143,56,172,29],[143,57,172,6],[144,0,173,5],[144,15,170,9],[144,21,174,9],[145,0,175,6,"data"],[145,16,175,6,"data"],[145,20,175,10],[145,23,175,13,"data"],[145,27,175,17],[145,28,175,18,"toString"],[145,36,175,13],[145,38,175,6],[146,0,176,6,"p"],[146,16,176,6,"p"],[146,17,176,7],[146,20,176,10,"fs"],[146,32,176,13,"writeFile"],[146,41,176,10],[146,42,176,23],[146,48,176,28,"_ref"],[146,52,176,10],[146,54,176,34,"data"],[146,58,176,10],[146,60,176,40],[146,66,176,10],[146,68,177,13,"then"],[146,72,176,10],[146,73,177,18],[146,83,177,19,"size"],[146,87,177,18],[147,0,177,18],[147,25,177,28,"Promise"],[147,32,177,35],[147,33,177,36,"resolve"],[147,40,177,28],[147,41,177,44,"size"],[147,45,177,28],[147,46,177,18],[148,0,177,18],[148,17,176,10],[148,18,176,6],[149,0,178,5],[151,0,179,4,"p"],[151,6,179,4,"p"],[151,7,179,5],[151,11,179,9,"p"],[151,12,179,10],[151,13,179,11,"then"],[151,17,179,9],[151,18,179,16],[151,28,179,17,"size"],[151,32,179,16],[151,34,179,26],[152,0,180,6],[152,14,180,11,"size"],[152,18,180,6],[152,21,180,18,"size"],[152,25,180,6],[154,0,181,6],[154,14,181,11,"_invokeOnCreateEvent"],[154,34,181,6],[155,0,182,5],[155,7,179,9],[155,9,183,5,"catch"],[155,14,179,9],[155,15,183,11],[155,25,183,12,"err"],[155,28,183,11],[155,30,183,20],[156,0,184,6,"log"],[156,8,184,6,"log"],[156,11,184,9],[156,12,184,10,"error"],[156,17,184,6],[156,18,184,16],[156,59,184,56],[156,65,184,61,"_ref"],[156,69,184,6],[156,71,184,67,"err"],[156,74,184,6],[157,0,185,5],[157,7,179,9],[157,8,179,4],[158,0,71,50],[159,0,187,3],[163,32,196,12,"fn"],[163,34],[163,36,196,32],[164,0,197,4,"log"],[164,8,197,4,"log"],[164,11,197,7],[164,12,197,8,"verbose"],[164,19,197,4],[164,20,197,16],[164,46,197,4],[164,48,197,44],[164,53,197,49,"_blobCreated"],[164,65,197,4],[165,0,198,4],[165,12,198,7],[165,13,198,8],[165,18,198,13,"_blobCreated"],[165,30,198,4],[165,32,199,6],[165,37,199,11,"_onCreated"],[165,47,199,6],[165,48,199,22,"push"],[165,52,199,6],[165,53,199,27,"fn"],[165,55,199,6],[165,57,198,4],[165,62,200,9],[166,0,201,6,"fn"],[166,10,201,6,"fn"],[166,12,201,8],[166,13,201,9],[166,17,201,8],[166,18,201,6],[167,0,202,5],[168,0,203,4],[168,15,203,11],[168,19,203,4],[169,0,204,3],[172,38,206,18],[173,0,207,4],[173,13,207,9,"_isDerived"],[173,23,207,4],[173,26,207,22],[173,30,207,4],[174,0,208,3],[177,42,219,22],[178,0,220,4],[178,15,220,11],[178,20,220,16,"_ref"],[178,24,220,4],[179,0,221,3],[182,28,230,8,"start"],[182,33],[182,35,230,23,"end"],[182,38],[182,40,230,65],[183,0,230,65],[185,0,230,65],[185,12,230,36,"contentType"],[185,23,230,65],[185,94,230,56],[185,96,230,65],[186,0,231,4],[186,12,231,7],[186,17,231,12,"_closed"],[186,24,231,4],[186,26,232,6],[186,32,232,12],[186,57,232,6],[187,0,233,4,"log"],[187,8,233,4,"log"],[187,11,233,7],[187,12,233,8,"verbose"],[187,19,233,4],[187,20,233,16],[187,34,233,4],[187,36,233,32,"start"],[187,41,233,4],[187,43,233,39,"end"],[187,46,233,4],[187,48,233,44,"contentType"],[187,59,233,4],[188,0,236,4],[188,12,236,8,"resPath"],[188,19,236,15],[188,22,236,18,"blobCacheDir"],[188,34,236,30],[188,37,236,33,"getBlobName"],[188,48,236,44],[188,50,236,4],[189,0,237,4],[189,12,237,8,"pass"],[189,16,237,12],[189,19,237,15],[189,24,237,4],[190,0,238,4,"log"],[190,8,238,4,"log"],[190,11,238,7],[190,12,238,8,"debug"],[190,17,238,4],[190,18,238,14],[190,45,238,4],[190,47,238,43,"resPath"],[190,54,238,4],[191,0,239,4],[191,12,239,8,"result"],[191,18,239,14],[191,21,239,17],[191,25,239,21,"Blob"],[191,29,239,17],[191,30,239,26,"RNFetchBlob"],[191,45,239,38,"wrap"],[191,49,239,26],[191,50,239,43,"resPath"],[191,57,239,26],[191,58,239,17],[191,60,239,53],[192,0,239,55,"type"],[192,10,239,55,"type"],[192,14,239,59],[192,16,239,62,"contentType"],[193,0,239,53],[193,9,239,17],[193,11,239,77],[193,15,239,17],[193,16,239,4],[195,0,240,4,"fs"],[195,20,240,7,"exists"],[195,26,240,4],[195,27,240,14,"blobCacheDir"],[195,39,240,4],[195,41,241,5,"then"],[195,45,240,4],[195,46,241,10],[195,56,241,11,"exist"],[195,61,241,10],[195,63,241,21],[196,0,242,6],[196,14,242,9,"exist"],[196,19,242,6],[196,21,243,8],[196,28,243,15,"Promise"],[196,35,243,22],[196,36,243,23,"resolve"],[196,43,243,15],[196,45,243,8],[197,0,244,6],[197,17,244,13,"fs"],[197,29,244,16,"mkdir"],[197,34,244,13],[197,35,244,22,"blobCacheDir"],[197,47,244,13],[197,48,244,6],[198,0,245,5],[198,9,240,4],[198,11,246,5,"then"],[198,15,240,4],[198,16,246,10],[199,0,246,10],[199,17,246,16,"fs"],[199,29,246,19,"slice"],[199,34,246,16],[199,35,246,25],[199,41,246,29],[199,42,246,30,"_ref"],[199,46,246,16],[199,48,246,36,"resPath"],[199,55,246,16],[199,57,246,45,"start"],[199,62,246,16],[199,64,246,52,"end"],[199,67,246,16],[199,68,246,10],[200,0,246,10],[200,9,240,4],[200,11,247,5,"then"],[200,15,240,4],[200,16,247,10],[200,26,247,11,"dest"],[200,30,247,10],[200,32,247,20],[201,0,248,6,"log"],[201,10,248,6,"log"],[201,13,248,9],[201,14,248,10,"debug"],[201,19,248,6],[201,20,248,16],[201,35,248,6],[201,37,248,33,"dest"],[201,41,248,6],[203,0,249,6,"result"],[203,10,249,6,"result"],[203,16,249,12],[203,17,249,13,"_invokeOnCreateEvent"],[203,37,249,6],[205,0,250,6,"pass"],[205,10,250,6,"pass"],[205,14,250,10],[205,17,250,13],[205,21,250,6],[206,0,251,5],[206,9,240,4],[206,11,252,5,"catch"],[206,16,240,4],[206,17,252,11],[206,27,252,12,"err"],[206,30,252,11],[206,32,252,20],[207,0,253,6,"console"],[207,10,253,6,"console"],[207,17,253,13],[207,18,253,14,"warn"],[207,22,253,6],[207,23,253,19],[207,43,253,6],[207,45,253,41,"err"],[207,48,253,6],[208,0,254,6,"pass"],[208,10,254,6,"pass"],[208,14,254,10],[208,17,254,13],[208,21,254,6],[209,0,255,5],[209,9,240,4],[211,0,256,4,"log"],[211,8,256,4,"log"],[211,11,256,7],[211,12,256,8,"debug"],[211,17,256,4],[211,18,256,14],[211,44,256,4],[212,0,258,4],[212,15,258,11,"result"],[212,21,258,4],[213,0,259,3],[216,31,267,11,"encoding"],[216,39],[216,41,267,41],[217,0,268,4],[217,12,268,7],[217,17,268,12,"_closed"],[217,24,268,4],[217,26,269,6],[217,32,269,12],[217,57,269,6],[218,0,270,4],[218,15,270,11,"fs"],[218,27,270,14,"readFile"],[218,35,270,11],[218,36,270,23],[218,41,270,28,"_ref"],[218,45,270,11],[218,47,270,34,"encoding"],[218,55,270,42],[218,59,270,46],[218,65,270,11],[218,66,270,4],[219,0,271,3],[222,30,278,10],[223,0,279,4],[223,12,279,7],[223,17,279,12,"_closed"],[223,24,279,4],[223,26,280,6],[223,33,280,13,"Promise"],[223,40,280,20],[223,41,280,21,"reject"],[223,47,280,13],[223,48,280,28],[223,73,280,13],[223,74,280,6],[224,0,281,4],[224,13,281,9,"_closed"],[224,20,281,4],[224,23,281,19],[224,27,281,4],[225,0,282,4],[225,15,282,11,"fs"],[225,27,282,14,"unlink"],[225,33,282,11],[225,34,282,21],[225,39,282,26,"_ref"],[225,43,282,11],[225,45,282,32,"catch"],[225,50,282,11],[225,51,282,38],[225,61,282,39,"err"],[225,64,282,38],[225,66,282,47],[226,0,283,6,"console"],[226,10,283,6,"console"],[226,17,283,13],[226,18,283,14,"warn"],[226,22,283,6],[226,23,283,19,"err"],[226,26,283,6],[227,0,284,5],[227,9,282,11],[227,10,282,4],[228,0,285,3],[231,34,287,14],[232,0,288,4],[232,12,288,7],[232,17,288,12,"_closed"],[232,24,288,4],[232,26,289,6],[232,33,289,13,"Promise"],[232,40,289,20],[232,41,289,21,"reject"],[232,47,289,13],[232,48,289,28],[232,73,289,13],[232,74,289,6],[233,0,290,4],[233,13,290,9,"_closed"],[233,20,290,4],[233,23,290,19],[233,27,290,4],[235,0,291,4],[235,12,291,7],[235,13,291,8],[235,18,291,13,"_isReference"],[235,30,291,4],[235,32,291,27],[236,0,292,6],[236,17,292,13,"fs"],[236,29,292,16,"unlink"],[236,35,292,13],[236,36,292,23],[236,41,292,28,"_ref"],[236,45,292,13],[236,47,292,34,"catch"],[236,52,292,13],[236,53,292,40],[236,63,292,41,"err"],[236,66,292,40],[236,68,292,49],[237,0,293,8,"console"],[237,12,293,8,"console"],[237,19,293,15],[237,20,293,16,"warn"],[237,24,293,8],[237,25,293,21,"err"],[237,28,293,8],[238,0,294,7],[238,11,292,13],[238,12,292,6],[239,0,295,5],[239,9,291,4],[239,15,296,9],[240,0,297,6],[240,17,297,13,"Promise"],[240,24,297,20],[240,25,297,21,"resolve"],[240,32,297,13],[240,34,297,6],[241,0,298,5],[242,0,299,3],[245,45,301,25],[246,0,302,4,"log"],[246,8,302,4,"log"],[246,11,302,7],[246,12,302,8,"verbose"],[246,19,302,4],[246,20,302,16],[246,41,302,4],[246,43,302,39],[246,48,302,44,"_onCreated"],[246,58,302,4],[247,0,303,4],[247,13,303,9,"_blobCreated"],[247,25,303,4],[247,28,303,24],[247,32,303,4],[248,0,304,4],[248,12,304,8,"fns"],[248,15,304,11],[248,18,304,14],[248,23,304,19,"_onCreated"],[248,33,304,4],[250,0,305,4],[250,13,305,8],[250,17,305,12,"i"],[250,18,305,4],[250,22,305,17,"fns"],[250,25,305,4],[250,27,305,22],[251,0,306,6],[251,14,306,9],[251,21,306,16,"fns"],[251,24,306,19],[251,25,306,20,"i"],[251,26,306,19],[251,27,306,9],[251,32,306,27],[251,42,306,6],[251,44,306,39],[252,0,307,8,"fns"],[252,12,307,8,"fns"],[252,15,307,11],[252,16,307,12,"i"],[252,17,307,11],[252,18,307,8],[252,19,307,15],[252,23,307,8],[253,0,308,7],[254,0,309,5],[256,0,310,4],[256,15,310,11],[256,20,310,16,"_onCreated"],[256,30,310,4],[257,0,311,3],[260,26,210,18],[261,0,211,4],[261,15,211,11],[261,20,211,16,"_isDerived"],[261,30,211,11],[261,34,211,30],[261,39,211,4],[262,0,212,3],[265,4,21,34,"EventTarget"],[265,25],[269,0,319,0],[269,11,319,9,"getBlobName"],[269,22,319,0],[269,25,319,23],[270,0,320,2],[270,11,320,9],[270,21,320,19],[270,41,320,2],[271,0,321,1],[273,0,330,0],[273,11,330,9,"createMixedBlobData"],[273,30,330,0],[273,31,330,29,"ref"],[273,34,330,0],[273,36,330,34,"dataArray"],[273,45,330,0],[273,47,330,45],[274,0,332,2],[274,8,332,6,"p"],[274,9,332,7],[274,12,332,10,"fs"],[274,24,332,13,"writeFile"],[274,33,332,10],[274,34,332,23,"ref"],[274,37,332,10],[274,39,332,28],[274,41,332,10],[274,42,332,2],[276,0,333,2],[276,8,333,6,"args"],[276,12,333,10],[276,15,333,13],[276,17,333,2],[277,0,334,2],[277,8,334,6,"size"],[277,12,334,10],[277,15,334,13],[277,16,334,2],[279,0,335,2],[279,9,335,6],[279,13,335,10,"i"],[279,14,335,2],[279,18,335,15,"dataArray"],[279,27,335,2],[279,29,335,26],[280,0,336,4],[280,10,336,8,"part"],[280,14,336,12],[280,17,336,15,"dataArray"],[280,26,336,24],[280,27,336,25,"i"],[280,28,336,24],[280,29,336,4],[281,0,337,4],[281,10,337,7],[281,11,337,8,"part"],[281,15,337,4],[281,17,338,6],[283,0,339,4],[283,10,339,7,"part"],[283,14,339,11],[283,15,339,12,"isRNFetchBlobPolyfill"],[283,36,339,4],[283,38,339,35],[284,0,340,6,"args"],[284,8,340,6,"args"],[284,12,340,10],[284,13,340,11,"push"],[284,17,340,6],[284,18,340,16],[284,19,340,17,"ref"],[284,22,340,16],[284,24,340,22,"part"],[284,28,340,26],[284,29,340,27,"_ref"],[284,33,340,16],[284,35,340,33],[284,40,340,16],[284,41,340,6],[285,0,341,5],[285,7,339,4],[285,13,342,9],[285,17,342,12],[285,24,342,19,"part"],[285,28,342,12],[285,33,342,28],[285,41,342,9],[285,43,343,6,"args"],[285,47,343,10],[285,48,343,11,"push"],[285,52,343,6],[285,53,343,16],[285,54,343,17,"ref"],[285,57,343,16],[285,59,343,22,"part"],[285,63,343,16],[285,65,343,28],[285,71,343,16],[285,72,343,6],[285,74,342,9],[285,79,348,9],[285,83,348,13,"Array"],[285,88,348,18],[285,89,348,19,"isArray"],[285,96,348,13],[285,97,348,27,"part"],[285,101,348,13],[285,102,348,9],[285,104,349,6,"args"],[285,108,349,10],[285,109,349,11,"push"],[285,113,349,6],[285,114,349,16],[285,115,349,17,"ref"],[285,118,349,16],[285,120,349,22,"part"],[285,124,349,16],[285,126,349,28],[285,133,349,16],[285,134,349,6],[286,0,350,3],[288,0,330,45],[288,31,352,10,"i"],[288,33,330,45],[289,0,353,4,"p"],[289,6,353,4,"p"],[289,7,353,5],[289,10,353,8,"p"],[289,11,353,9],[289,12,353,10,"then"],[289,16,353,8],[289,17,353,15],[289,27,353,24,"written"],[289,34,353,15],[289,36,353,32],[290,0,354,6],[290,12,354,10,"arg"],[290,15,354,13],[290,18,354,16],[290,22,354,6],[291,0,355,6],[291,12,355,9,"written"],[291,19,355,6],[291,21,356,8,"size"],[291,25,356,12],[291,29,356,16,"written"],[291,36,356,8],[292,0,357,6,"log"],[292,8,357,6,"log"],[292,11,357,9],[292,12,357,10,"verbose"],[292,19,357,6],[292,20,357,18],[292,38,357,6],[292,40,357,38,"args"],[292,44,357,42],[292,45,357,43,"i"],[292,47,357,42],[292,48,357,6],[292,50,357,47,"written"],[292,57,357,6],[293,0,358,6],[293,15,358,13,"fs"],[293,27,358,16,"appendFile"],[293,37,358,13],[293,90,358,30,"arg"],[293,93,358,13],[293,95,358,6],[294,0,359,5],[294,7,353,15],[294,8,359,6,"bind"],[294,12,353,15],[294,13,359,11,"args"],[294,17,359,15],[294,18,359,16,"i"],[294,20,359,15],[294,21,353,15],[294,22,353,8],[294,23,353,4],[295,0,330,45],[297,0,352,2],[297,9,352,6],[297,13,352,10,"i"],[297,15,352,2],[297,19,352,15,"args"],[297,23,352,2],[297,25,352,21],[298,0,352,21],[298,12,352,10,"i"],[298,14,352,21],[299,0,360,3],[301,0,361,2],[301,11,361,9,"p"],[301,12,361,10],[301,13,361,11,"then"],[301,17,361,9],[301,18,361,16],[302,0,361,16],[302,13,361,22,"Promise"],[302,20,361,29],[302,21,361,30,"resolve"],[302,28,361,22],[302,29,361,38,"size"],[302,33,361,22],[302,34,361,16],[303,0,361,16],[303,5,361,9],[303,6,361,2],[304,0,362,1]]},"type":"js/module"}]}
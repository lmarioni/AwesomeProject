{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"./utils/invariant","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"./utils/invariant\"));\n\n  function _objectSpread(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n      var ownKeys = Object.keys(source);\n\n      if (typeof Object.getOwnPropertySymbols === 'function') {\n        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n          return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n        }));\n      }\n\n      ownKeys.forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    }\n\n    return target;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  var StateUtils = {\n    get: function get(state, key) {\n      return state.routes.find(function (route) {\n        return route.key === key;\n      }) || null;\n    },\n    indexOf: function indexOf(state, key) {\n      return state.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n    },\n    has: function has(state, key) {\n      return !!state.routes.some(function (route) {\n        return route.key === key;\n      });\n    },\n    push: function push(state, route) {\n      (0, _invariant.default)(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);\n      var routes = state.routes.slice();\n      routes.push(route);\n      return _objectSpread({}, state, {\n        index: routes.length - 1,\n        routes: routes\n      });\n    },\n    pop: function pop(state) {\n      if (state.index <= 0) {\n        return state;\n      }\n\n      var routes = state.routes.slice(0, -1);\n      return _objectSpread({}, state, {\n        index: routes.length - 1,\n        routes: routes\n      });\n    },\n    jumpToIndex: function jumpToIndex(state, index) {\n      if (index === state.index) {\n        return state;\n      }\n\n      (0, _invariant.default)(!!state.routes[index], 'invalid index %s to jump to', index);\n      return _objectSpread({}, state, {\n        index: index\n      });\n    },\n    jumpTo: function jumpTo(state, key) {\n      var index = StateUtils.indexOf(state, key);\n      return StateUtils.jumpToIndex(state, index);\n    },\n    back: function back(state) {\n      var index = state.index - 1;\n      var route = state.routes[index];\n      return route ? StateUtils.jumpToIndex(state, index) : state;\n    },\n    forward: function forward(state) {\n      var index = state.index + 1;\n      var route = state.routes[index];\n      return route ? StateUtils.jumpToIndex(state, index) : state;\n    },\n    replaceAndPrune: function replaceAndPrune(state, key, route) {\n      var index = StateUtils.indexOf(state, key);\n      var replaced = StateUtils.replaceAtIndex(state, index, route);\n      return _objectSpread({}, replaced, {\n        routes: replaced.routes.slice(0, index + 1)\n      });\n    },\n    replaceAt: function replaceAt(state, key, route) {\n      var preserveIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var index = StateUtils.indexOf(state, key);\n      var nextIndex = preserveIndex ? state.index : index;\n      var nextState = StateUtils.replaceAtIndex(state, index, route);\n      nextState.index = nextIndex;\n      return nextState;\n    },\n    replaceAtIndex: function replaceAtIndex(state, index, route) {\n      (0, _invariant.default)(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);\n\n      if (state.routes[index] === route && index === state.index) {\n        return state;\n      }\n\n      var routes = state.routes.slice();\n      routes[index] = route;\n      return _objectSpread({}, state, {\n        index: index,\n        routes: routes\n      });\n    },\n    reset: function reset(state, routes, index) {\n      (0, _invariant.default)(routes.length && Array.isArray(routes), 'invalid routes to replace');\n      var nextIndex = index === undefined ? routes.length - 1 : index;\n\n      if (state.routes.length === routes.length && state.index === nextIndex) {\n        var compare = function compare(route, ii) {\n          return routes[ii] === route;\n        };\n\n        if (state.routes.every(compare)) {\n          return state;\n        }\n      }\n\n      (0, _invariant.default)(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n      return _objectSpread({}, state, {\n        index: nextIndex,\n        routes: routes\n      });\n    }\n  };\n  var _default = StateUtils;\n  exports.default = _default;\n});","map":[[9,0,5,0],[11,0,1,0],[11,11,1,9,"_objectSpread"],[11,24,1,0],[11,25,1,23,"target"],[11,31,1,0],[11,33,1,31],[12,0,1,33],[12,9,1,38],[12,13,1,42,"i"],[12,14,1,43],[12,17,1,46],[12,18,1,33],[12,20,1,49,"i"],[12,21,1,50],[12,24,1,53,"arguments"],[12,33,1,62],[12,34,1,63,"length"],[12,40,1,33],[12,42,1,71,"i"],[12,43,1,72],[12,45,1,33],[12,47,1,76],[13,0,1,78],[13,10,1,82,"source"],[13,16,1,88],[13,19,1,91,"arguments"],[13,28,1,100],[13,29,1,101,"i"],[13,30,1,100],[13,31,1,91],[13,35,1,107],[13,39,1,91],[13,42,1,114,"arguments"],[13,51,1,123],[13,52,1,124,"i"],[13,53,1,123],[13,54,1,91],[13,57,1,129],[13,59,1,78],[14,0,1,133],[14,10,1,137,"ownKeys"],[14,17,1,144],[14,20,1,147,"Object"],[14,26,1,153],[14,27,1,154,"keys"],[14,31,1,147],[14,32,1,159,"source"],[14,38,1,147],[14,39,1,133],[16,0,1,168],[16,10,1,172],[16,17,1,179,"Object"],[16,23,1,185],[16,24,1,186,"getOwnPropertySymbols"],[16,45,1,172],[16,50,1,212],[16,60,1,168],[16,62,1,224],[17,0,1,226,"ownKeys"],[17,8,1,226,"ownKeys"],[17,15,1,233],[17,18,1,236,"ownKeys"],[17,25,1,243],[17,26,1,244,"concat"],[17,32,1,236],[17,33,1,251,"Object"],[17,39,1,257],[17,40,1,258,"getOwnPropertySymbols"],[17,61,1,251],[17,62,1,280,"source"],[17,68,1,251],[17,70,1,288,"filter"],[17,76,1,251],[17,77,1,295],[17,87,1,305,"sym"],[17,90,1,295],[17,92,1,310],[18,0,1,312],[18,17,1,319,"Object"],[18,23,1,325],[18,24,1,326,"getOwnPropertyDescriptor"],[18,48,1,319],[18,49,1,351,"source"],[18,55,1,319],[18,57,1,359,"sym"],[18,60,1,319],[18,62,1,364,"enumerable"],[18,72,1,312],[19,0,1,377],[19,9,1,251],[19,10,1,236],[19,11,1,226],[20,0,1,382],[22,0,1,383,"ownKeys"],[22,6,1,383,"ownKeys"],[22,13,1,390],[22,14,1,391,"forEach"],[22,21,1,383],[22,22,1,399],[22,32,1,409,"key"],[22,35,1,399],[22,37,1,414],[23,0,1,416,"_defineProperty"],[23,8,1,416,"_defineProperty"],[23,23,1,431],[23,24,1,432,"target"],[23,30,1,431],[23,32,1,440,"key"],[23,35,1,431],[23,37,1,445,"source"],[23,43,1,451],[23,44,1,452,"key"],[23,47,1,451],[23,48,1,431],[23,49,1,416],[24,0,1,460],[24,7,1,383],[25,0,1,464],[27,0,1,465],[27,11,1,472,"target"],[27,17,1,465],[28,0,1,481],[30,0,3,0],[30,11,3,9,"_defineProperty"],[30,26,3,0],[30,27,3,25,"obj"],[30,30,3,0],[30,32,3,30,"key"],[30,35,3,0],[30,37,3,35,"value"],[30,42,3,0],[30,44,3,42],[31,0,3,44],[31,8,3,48,"key"],[31,11,3,51],[31,15,3,55,"obj"],[31,18,3,44],[31,20,3,60],[32,0,3,62,"Object"],[32,6,3,62,"Object"],[32,12,3,68],[32,13,3,69,"defineProperty"],[32,27,3,62],[32,28,3,84,"obj"],[32,31,3,62],[32,33,3,89,"key"],[32,36,3,62],[32,38,3,94],[33,0,3,96,"value"],[33,8,3,96,"value"],[33,13,3,101],[33,15,3,103,"value"],[33,20,3,94],[34,0,3,110,"enumerable"],[34,8,3,110,"enumerable"],[34,18,3,120],[34,20,3,122],[34,24,3,94],[35,0,3,128,"configurable"],[35,8,3,128,"configurable"],[35,20,3,140],[35,22,3,142],[35,26,3,94],[36,0,3,148,"writable"],[36,8,3,148,"writable"],[36,16,3,156],[36,18,3,158],[37,0,3,94],[37,7,3,62],[38,0,3,168],[38,5,3,44],[38,11,3,174],[39,0,3,176,"obj"],[39,6,3,176,"obj"],[39,9,3,179],[39,10,3,180,"key"],[39,13,3,179],[39,14,3,176],[39,17,3,187,"value"],[39,22,3,176],[40,0,3,195],[42,0,3,196],[42,11,3,203,"obj"],[42,14,3,196],[43,0,3,209],[45,0,15,0],[45,6,15,4,"StateUtils"],[45,16,15,14],[45,19,15,17],[46,0,19,2,"get"],[46,4,19,2,"get"],[46,7,15,17],[46,22,19,6,"state"],[46,27,15,17],[46,29,19,13,"key"],[46,32,15,17],[46,34,19,18],[47,0,20,4],[47,13,20,11,"state"],[47,18,20,16],[47,19,20,17,"routes"],[47,25,20,11],[47,26,20,24,"find"],[47,30,20,11],[47,31,20,29],[47,41,20,29,"route"],[47,46,20,34],[48,0,20,34],[48,15,20,38,"route"],[48,20,20,43],[48,21,20,44,"key"],[48,24,20,38],[48,29,20,52,"key"],[48,32,20,34],[49,0,20,34],[49,7,20,11],[49,12,20,60],[49,16,20,4],[50,0,21,3],[50,5,15,17],[51,0,27,2,"indexOf"],[51,4,27,2,"indexOf"],[51,11,15,17],[51,30,27,10,"state"],[51,35,15,17],[51,37,27,17,"key"],[51,40,15,17],[51,42,27,22],[52,0,28,4],[52,13,28,11,"state"],[52,18,28,16],[52,19,28,17,"routes"],[52,25,28,11],[52,26,28,24,"findIndex"],[52,35,28,11],[52,36,28,34],[52,46,28,34,"route"],[52,51,28,39],[53,0,28,39],[53,15,28,43,"route"],[53,20,28,48],[53,21,28,49,"key"],[53,24,28,43],[53,29,28,57,"key"],[53,32,28,39],[54,0,28,39],[54,7,28,11],[54,8,28,4],[55,0,29,3],[55,5,15,17],[56,0,35,2,"has"],[56,4,35,2,"has"],[56,7,15,17],[56,22,35,6,"state"],[56,27,15,17],[56,29,35,13,"key"],[56,32,15,17],[56,34,35,18],[57,0,36,4],[57,13,36,11],[57,14,36,12],[57,15,36,13,"state"],[57,20,36,18],[57,21,36,19,"routes"],[57,27,36,13],[57,28,36,26,"some"],[57,32,36,13],[57,33,36,31],[57,43,36,31,"route"],[57,48,36,36],[58,0,36,36],[58,15,36,40,"route"],[58,20,36,45],[58,21,36,46,"key"],[58,24,36,40],[58,29,36,54,"key"],[58,32,36,36],[59,0,36,36],[59,7,36,13],[59,8,36,4],[60,0,37,3],[60,5,15,17],[61,0,44,2,"push"],[61,4,44,2,"push"],[61,8,15,17],[61,24,44,7,"state"],[61,29,15,17],[61,31,44,14,"route"],[61,36,15,17],[61,38,44,21],[62,0,45,4],[62,30,45,14,"StateUtils"],[62,40,45,24],[62,41,45,25,"indexOf"],[62,48,45,14],[62,49,45,33,"state"],[62,54,45,14],[62,56,45,40,"route"],[62,61,45,45],[62,62,45,46,"key"],[62,65,45,14],[62,71,45,55],[62,72,45,56],[62,73,45,4],[62,75,45,59],[62,121,45,4],[62,123,45,107,"route"],[62,128,45,112],[62,129,45,113,"key"],[62,132,45,4],[63,0,46,4],[63,10,46,8,"routes"],[63,16,46,14],[63,19,46,17,"state"],[63,24,46,22],[63,25,46,23,"routes"],[63,31,46,17],[63,32,46,30,"slice"],[63,37,46,17],[63,39,46,4],[64,0,47,4,"routes"],[64,6,47,4,"routes"],[64,12,47,10],[64,13,47,11,"push"],[64,17,47,4],[64,18,47,16,"route"],[64,23,47,4],[65,0,48,4],[65,13,48,11,"_objectSpread"],[65,26,48,24],[65,27,48,25],[65,29,48,24],[65,31,48,29,"state"],[65,36,48,24],[65,38,48,36],[66,0,49,6,"index"],[66,8,49,6,"index"],[66,13,49,11],[66,15,49,13,"routes"],[66,21,49,19],[66,22,49,20,"length"],[66,28,49,13],[66,31,49,29],[66,32,48,36],[67,0,50,6,"routes"],[67,8,50,6,"routes"],[67,14,50,12],[67,16,50,6,"routes"],[68,0,48,36],[68,7,48,24],[68,8,48,4],[69,0,52,3],[69,5,15,17],[70,0,59,2,"pop"],[70,4,59,2,"pop"],[70,7,15,17],[70,22,59,6,"state"],[70,27,15,17],[70,29,59,13],[71,0,60,4],[71,10,60,8,"state"],[71,15,60,13],[71,16,60,14,"index"],[71,21,60,8],[71,25,60,23],[71,26,60,4],[71,28,60,26],[72,0,62,6],[72,15,62,13,"state"],[72,20,62,6],[73,0,63,5],[75,0,65,4],[75,10,65,8,"routes"],[75,16,65,14],[75,19,65,17,"state"],[75,24,65,22],[75,25,65,23,"routes"],[75,31,65,17],[75,32,65,30,"slice"],[75,37,65,17],[75,38,65,36],[75,39,65,17],[75,41,65,39],[75,42,65,40],[75,43,65,17],[75,44,65,4],[76,0,66,4],[76,13,66,11,"_objectSpread"],[76,26,66,24],[76,27,66,25],[76,29,66,24],[76,31,66,29,"state"],[76,36,66,24],[76,38,66,36],[77,0,67,6,"index"],[77,8,67,6,"index"],[77,13,67,11],[77,15,67,13,"routes"],[77,21,67,19],[77,22,67,20,"length"],[77,28,67,13],[77,31,67,29],[77,32,66,36],[78,0,68,6,"routes"],[78,8,68,6,"routes"],[78,14,68,12],[78,16,68,6,"routes"],[79,0,66,36],[79,7,66,24],[79,8,66,4],[80,0,70,3],[80,5,15,17],[81,0,75,2,"jumpToIndex"],[81,4,75,2,"jumpToIndex"],[81,15,15,17],[81,38,75,14,"state"],[81,43,15,17],[81,45,75,21,"index"],[81,50,15,17],[81,52,75,28],[82,0,76,4],[82,10,76,8,"index"],[82,15,76,13],[82,20,76,18,"state"],[82,25,76,23],[82,26,76,24,"index"],[82,31,76,4],[82,33,76,31],[83,0,77,6],[83,15,77,13,"state"],[83,20,77,6],[84,0,78,5],[86,0,80,4],[86,30,80,14],[86,31,80,15],[86,32,80,16,"state"],[86,37,80,21],[86,38,80,22,"routes"],[86,44,80,16],[86,45,80,29,"index"],[86,50,80,16],[86,51,80,4],[86,53,80,37],[86,82,80,4],[86,84,80,68,"index"],[86,89,80,4],[87,0,81,4],[87,13,81,11,"_objectSpread"],[87,26,81,24],[87,27,81,25],[87,29,81,24],[87,31,81,29,"state"],[87,36,81,24],[87,38,81,36],[88,0,82,6,"index"],[88,8,82,6,"index"],[88,13,82,11],[88,15,82,6,"index"],[89,0,81,36],[89,7,81,24],[89,8,81,4],[90,0,84,3],[90,5,15,17],[91,0,89,2,"jumpTo"],[91,4,89,2,"jumpTo"],[91,10,15,17],[91,28,89,9,"state"],[91,33,15,17],[91,35,89,16,"key"],[91,38,15,17],[91,40,89,21],[92,0,90,4],[92,10,90,8,"index"],[92,15,90,13],[92,18,90,16,"StateUtils"],[92,28,90,26],[92,29,90,27,"indexOf"],[92,36,90,16],[92,37,90,35,"state"],[92,42,90,16],[92,44,90,42,"key"],[92,47,90,16],[92,48,90,4],[93,0,91,4],[93,13,91,11,"StateUtils"],[93,23,91,21],[93,24,91,22,"jumpToIndex"],[93,35,91,11],[93,36,91,34,"state"],[93,41,91,11],[93,43,91,41,"index"],[93,48,91,11],[93,49,91,4],[94,0,92,3],[94,5,15,17],[95,0,97,2,"back"],[95,4,97,2,"back"],[95,8,15,17],[95,24,97,7,"state"],[95,29,15,17],[95,31,97,14],[96,0,98,4],[96,10,98,8,"index"],[96,15,98,13],[96,18,98,16,"state"],[96,23,98,21],[96,24,98,22,"index"],[96,29,98,16],[96,32,98,30],[96,33,98,4],[97,0,99,4],[97,10,99,8,"route"],[97,15,99,13],[97,18,99,16,"state"],[97,23,99,21],[97,24,99,22,"routes"],[97,30,99,16],[97,31,99,29,"index"],[97,36,99,16],[97,37,99,4],[98,0,100,4],[98,13,100,11,"route"],[98,18,100,16],[98,21,100,19,"StateUtils"],[98,31,100,29],[98,32,100,30,"jumpToIndex"],[98,43,100,19],[98,44,100,42,"state"],[98,49,100,19],[98,51,100,49,"index"],[98,56,100,19],[98,57,100,16],[98,60,100,58,"state"],[98,65,100,4],[99,0,101,3],[99,5,15,17],[100,0,106,2,"forward"],[100,4,106,2,"forward"],[100,11,15,17],[100,30,106,10,"state"],[100,35,15,17],[100,37,106,17],[101,0,107,4],[101,10,107,8,"index"],[101,15,107,13],[101,18,107,16,"state"],[101,23,107,21],[101,24,107,22,"index"],[101,29,107,16],[101,32,107,30],[101,33,107,4],[102,0,108,4],[102,10,108,8,"route"],[102,15,108,13],[102,18,108,16,"state"],[102,23,108,21],[102,24,108,22,"routes"],[102,30,108,16],[102,31,108,29,"index"],[102,36,108,16],[102,37,108,4],[103,0,109,4],[103,13,109,11,"route"],[103,18,109,16],[103,21,109,19,"StateUtils"],[103,31,109,29],[103,32,109,30,"jumpToIndex"],[103,43,109,19],[103,44,109,42,"state"],[103,49,109,19],[103,51,109,49,"index"],[103,56,109,19],[103,57,109,16],[103,60,109,58,"state"],[103,65,109,4],[104,0,110,3],[104,5,15,17],[105,0,117,2,"replaceAndPrune"],[105,4,117,2,"replaceAndPrune"],[105,19,15,17],[105,46,117,18,"state"],[105,51,15,17],[105,53,117,25,"key"],[105,56,15,17],[105,58,117,30,"route"],[105,63,15,17],[105,65,117,37],[106,0,118,4],[106,10,118,8,"index"],[106,15,118,13],[106,18,118,16,"StateUtils"],[106,28,118,26],[106,29,118,27,"indexOf"],[106,36,118,16],[106,37,118,35,"state"],[106,42,118,16],[106,44,118,42,"key"],[106,47,118,16],[106,48,118,4],[107,0,119,4],[107,10,119,8,"replaced"],[107,18,119,16],[107,21,119,19,"StateUtils"],[107,31,119,29],[107,32,119,30,"replaceAtIndex"],[107,46,119,19],[107,47,119,45,"state"],[107,52,119,19],[107,54,119,52,"index"],[107,59,119,19],[107,61,119,59,"route"],[107,66,119,19],[107,67,119,4],[108,0,120,4],[108,13,120,11,"_objectSpread"],[108,26,120,24],[108,27,120,25],[108,29,120,24],[108,31,120,29,"replaced"],[108,39,120,24],[108,41,120,39],[109,0,121,6,"routes"],[109,8,121,6,"routes"],[109,14,121,12],[109,16,121,14,"replaced"],[109,24,121,22],[109,25,121,23,"routes"],[109,31,121,14],[109,32,121,30,"slice"],[109,37,121,14],[109,38,121,36],[109,39,121,14],[109,41,121,39,"index"],[109,46,121,44],[109,49,121,47],[109,50,121,14],[110,0,120,39],[110,7,120,24],[110,8,120,4],[111,0,123,3],[111,5,15,17],[112,0,132,2,"replaceAt"],[112,4,132,2,"replaceAt"],[112,13,15,17],[112,34,132,12,"state"],[112,39,15,17],[112,41,132,19,"key"],[112,44,15,17],[112,46,132,24,"route"],[112,51,15,17],[112,53,132,54],[113,0,132,54],[113,10,132,31,"preserveIndex"],[113,23,132,54],[113,94,132,47],[113,99,132,54],[114,0,133,4],[114,10,133,8,"index"],[114,15,133,13],[114,18,133,16,"StateUtils"],[114,28,133,26],[114,29,133,27,"indexOf"],[114,36,133,16],[114,37,133,35,"state"],[114,42,133,16],[114,44,133,42,"key"],[114,47,133,16],[114,48,133,4],[115,0,134,4],[115,10,134,8,"nextIndex"],[115,19,134,17],[115,22,134,20,"preserveIndex"],[115,35,134,33],[115,38,134,36,"state"],[115,43,134,41],[115,44,134,42,"index"],[115,49,134,33],[115,52,134,50,"index"],[115,57,134,4],[116,0,135,4],[116,10,135,8,"nextState"],[116,19,135,17],[116,22,135,20,"StateUtils"],[116,32,135,30],[116,33,135,31,"replaceAtIndex"],[116,47,135,20],[116,48,135,46,"state"],[116,53,135,20],[116,55,135,53,"index"],[116,60,135,20],[116,62,135,60,"route"],[116,67,135,20],[116,68,135,4],[117,0,136,4,"nextState"],[117,6,136,4,"nextState"],[117,15,136,13],[117,16,136,14,"index"],[117,21,136,4],[117,24,136,22,"nextIndex"],[117,33,136,4],[118,0,137,4],[118,13,137,11,"nextState"],[118,22,137,4],[119,0,138,3],[119,5,15,17],[120,0,145,2,"replaceAtIndex"],[120,4,145,2,"replaceAtIndex"],[120,18,15,17],[120,44,145,17,"state"],[120,49,15,17],[120,51,145,24,"index"],[120,56,15,17],[120,58,145,31,"route"],[120,63,15,17],[120,65,145,38],[121,0,146,4],[121,30,146,14],[121,31,146,15],[121,32,146,16,"state"],[121,37,146,21],[121,38,146,22,"routes"],[121,44,146,16],[121,45,146,29,"index"],[121,50,146,16],[121,51,146,4],[121,53,146,37],[121,94,146,4],[121,96,146,80,"index"],[121,101,146,4],[121,103,146,87,"route"],[121,108,146,92],[121,109,146,93,"key"],[121,112,146,4],[123,0,148,4],[123,10,148,8,"state"],[123,15,148,13],[123,16,148,14,"routes"],[123,22,148,8],[123,23,148,21,"index"],[123,28,148,8],[123,34,148,32,"route"],[123,39,148,8],[123,43,148,41,"index"],[123,48,148,46],[123,53,148,51,"state"],[123,58,148,56],[123,59,148,57,"index"],[123,64,148,4],[123,66,148,64],[124,0,149,6],[124,15,149,13,"state"],[124,20,149,6],[125,0,150,5],[127,0,152,4],[127,10,152,8,"routes"],[127,16,152,14],[127,19,152,17,"state"],[127,24,152,22],[127,25,152,23,"routes"],[127,31,152,17],[127,32,152,30,"slice"],[127,37,152,17],[127,39,152,4],[128,0,153,4,"routes"],[128,6,153,4,"routes"],[128,12,153,10],[128,13,153,11,"index"],[128,18,153,10],[128,19,153,4],[128,22,153,20,"route"],[128,27,153,4],[129,0,154,4],[129,13,154,11,"_objectSpread"],[129,26,154,24],[129,27,154,25],[129,29,154,24],[129,31,154,29,"state"],[129,36,154,24],[129,38,154,36],[130,0,155,6,"index"],[130,8,155,6,"index"],[130,13,155,11],[130,15,155,6,"index"],[130,20,154,36],[131,0,156,6,"routes"],[131,8,156,6,"routes"],[131,14,156,12],[131,16,156,6,"routes"],[132,0,154,36],[132,7,154,24],[132,8,154,4],[133,0,158,3],[133,5,15,17],[134,0,165,2,"reset"],[134,4,165,2,"reset"],[134,9,15,17],[134,26,165,8,"state"],[134,31,15,17],[134,33,165,15,"routes"],[134,39,15,17],[134,41,165,23,"index"],[134,46,15,17],[134,48,165,30],[135,0,166,4],[135,30,166,14,"routes"],[135,36,166,20],[135,37,166,21,"length"],[135,43,166,14],[135,47,166,31,"Array"],[135,52,166,36],[135,53,166,37,"isArray"],[135,60,166,31],[135,61,166,45,"routes"],[135,67,166,31],[135,68,166,4],[135,70,166,54],[135,97,166,4],[136,0,167,4],[136,10,167,8,"nextIndex"],[136,19,167,17],[136,22,167,20,"index"],[136,27,167,25],[136,32,167,30,"undefined"],[136,41,167,20],[136,44,167,42,"routes"],[136,50,167,48],[136,51,167,49,"length"],[136,57,167,42],[136,60,167,58],[136,61,167,20],[136,64,167,62,"index"],[136,69,167,4],[138,0,169,4],[138,10,169,8,"state"],[138,15,169,13],[138,16,169,14,"routes"],[138,22,169,8],[138,23,169,21,"length"],[138,29,169,8],[138,34,169,32,"routes"],[138,40,169,38],[138,41,169,39,"length"],[138,47,169,8],[138,51,169,49,"state"],[138,56,169,54],[138,57,169,55,"index"],[138,62,169,49],[138,67,169,65,"nextIndex"],[138,76,169,4],[138,78,169,76],[139,0,170,6],[139,12,170,10,"compare"],[139,19,170,17],[139,22,170,20],[139,31,170,10,"compare"],[139,38,170,20],[139,39,170,21,"route"],[139,44,170,20],[139,46,170,28,"ii"],[139,48,170,20],[140,0,170,20],[140,17,170,35,"routes"],[140,23,170,41],[140,24,170,42,"ii"],[140,26,170,41],[140,27,170,35],[140,32,170,50,"route"],[140,37,170,20],[141,0,170,20],[141,9,170,6],[143,0,172,6],[143,12,172,10,"state"],[143,17,172,15],[143,18,172,16,"routes"],[143,24,172,10],[143,25,172,23,"every"],[143,30,172,10],[143,31,172,29,"compare"],[143,38,172,10],[143,39,172,6],[143,41,172,39],[144,0,173,8],[144,17,173,15,"state"],[144,22,173,8],[145,0,174,7],[146,0,175,5],[148,0,177,4],[148,30,177,14],[148,31,177,15],[148,32,177,16,"routes"],[148,38,177,22],[148,39,177,23,"nextIndex"],[148,48,177,22],[148,49,177,4],[148,51,177,35],[148,78,177,4],[148,80,177,64,"nextIndex"],[148,89,177,4],[149,0,178,4],[149,13,178,11,"_objectSpread"],[149,26,178,24],[149,27,178,25],[149,29,178,24],[149,31,178,29,"state"],[149,36,178,24],[149,38,178,36],[150,0,179,6,"index"],[150,8,179,6,"index"],[150,13,179,11],[150,15,179,13,"nextIndex"],[150,24,178,36],[151,0,180,6,"routes"],[151,8,180,6,"routes"],[151,14,180,12],[151,16,180,6,"routes"],[152,0,178,36],[152,7,178,24],[152,8,178,4],[153,0,182,3],[154,0,15,17],[154,3,15,0],[155,17,185,15,"StateUtils"],[155,27]]},"type":"js/module"}]}